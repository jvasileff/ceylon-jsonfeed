(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"$mod-deps":["ceylon.language\/1.3.2","ceylon.buffer\/1.3.2"],"$mod-name":"ceylon.uri","ceylon.uri":{percentEncoder:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"o",an:[{doc:["Contains methods for percent-encoding. \n    See http:\/\/tools.ietf.org\/html\/rfc3986#appendix-A for specifications."]},{by:["Stéphane Épardaud"]}],$m:{encodePathSegmentName:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an path\/segment name URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodePathSegmentName"},encodeRegName:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an authority\/regName URI part (host name or IPV4Literal)"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodeRegName"},isAlpha$s8t8ga:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["alpha = lowalpha | upalpha"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isAlpha"},isLowAlpha$kv7edy:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["lowalpha = 'a'..'z'"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isLowAlpha"},encodePathSegmentParamValue:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an path\/segment parameter value URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodePathSegmentParamValue"},isDigit$hq1gxt:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["digit = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isDigit"},encodePathSegmentParamName:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an path\/segment parameter name URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodePathSegmentParamName"},encodeUser:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an authority\/user URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodeUser"},isAuthority$vp4x21:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["authority = unreserved | escaped | sub-delims\n\n- Note: we don`t allow escaped here since we will escape it ourselves, so we don`t want to allow them in the\n  unescaped sequences.\n- Note: we don't allow ':' in userinfo as that's the user\/pass delimiter\n- Note: this class doesn't exist but represents the value used for user\/pass\/reg-name (NOT for IPLiteral)"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isAuthority"},encodePassword:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an authority\/password URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodePassword"},isPathSegment$yzw3cq:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["path_segment = pchar <without> \";\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isPathSegment"},isUnreserved$xh6re1:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["unreserved = ALPHA \/ DIGIT \/ \"-\" \/ \".\" \/ \"_\" \/ \"~\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isUnreserved"},isPathParamValue$2cicj3:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["path_param_value = pchar <without> \";\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isPathParamValue"},isAlphaNum$7ekm08:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["alphanum = alpha | digit"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isAlphaNum"},isPChar$txcy8i:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["pchar = unreserved | escaped | sub-delims | \":\" | \"@\"\n\nNote: we don`t allow escaped here since we will escape it ourselves, so we don`t want to allow them in the\nunescaped sequences\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isPChar"},isPathParamName$q892pj:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["path_param_name = pchar <without> \";\" | \"=\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isPathParamName"},encodeFragment:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in a fragment URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodeFragment"},isQuery$dh5bdw:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["query = pchar \/ \"\/\" \/ \"?\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isQuery"},isGenDelim$33lrd5:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["gen-delims = \":\" \/ \"\/\" \/ \"?\" \/ \"#\" \/ \"[\" \/ \"]\" \/ \"@\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isGenDelim"},encodePart$uehecp:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",$m:{allowed$gf6t7e:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"allowed"}},ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"},{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"encoding"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"allowed"}]],nm:"encodePart"},encodeQueryPart:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Percent-encodes a string for use in an query parameter name or value URI part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"encodeQueryPart"},isFragment$jbnhcw:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["fragment = pchar \/ \"\/\" \/ \"?\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isFragment"},isUpAlpha$994uqh:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:[{doc:["upalpha = 'A'..'Z'"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isUpAlpha"},isSubDelim$e8jj95:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["sub-delims = \"!\" \/ \"$\" \/ \"&\" \/ \"'\" \/ \"(\" \/ \")\" \/ \"*\" \/ \"+\" \/ \",\" \/ \";\" \/ \"=\"\n"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Character"},mt:"prm",nm:"c"}]],nm:"isSubDelim"}},nm:"percentEncoder"},PathSegment:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["Represents a URI Path segment part"]},{by:["Stéphane Épardaud"]}],$m:{equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this object"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},serialiseParameter$6ff1nc:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{pk:".",nm:"Parameter"},mt:"prm",nm:"param"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"serialiseParameter"},toRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Returns either an externalisable (percent-encoded) or human (non parseable) representation of this part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"}},$at:{humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (non parseable) representation of this part"]}],nm:"humanRepresentation"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded) representation of this part"]}],nm:"string"},name:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",an:[{doc:["The path segment name"]}],nm:"name"},parameters:{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"Parameter"}},pk:"$",nm:"Sequential"},pa:1,mt:"a",an:[{doc:["The path segment parameters"]}],nm:"parameters"}},ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",an:[{doc:["The path segment name"]}],nm:"name"},{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"Parameter"}},pk:"$",nm:"Sequential"},pa:1,mt:"prm",an:[{doc:["The path segment parameters"]}],seq:1,nm:"parameters"}],nm:"PathSegment"},Query:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["Represents a URI Query part"]},{by:["Stéphane Épardaud"]}],$m:{equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this object"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},toRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Returns either an externalisable (percent-encoded) or human (non parseable) representation of this part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"},serialiseParameter$kcf3jm:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{pk:".",nm:"Parameter"},mt:"prm",nm:"param"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"serialiseParameter"}},$at:{humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (non parseable) representation of this part"]}],nm:"humanRepresentation"},specified:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",an:[{doc:["Returns true if we have any query parameter"]}],nm:"specified"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded) representation of this part"]}],nm:"string"},parameters:{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"Parameter"}},pk:"$",nm:"Sequential"},pa:1,mt:"a",an:[{doc:["The list of query parameters"]}],nm:"parameters"}},ps:[{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"Parameter"}},pk:"$",nm:"Sequential"},pa:1,mt:"prm",an:[{doc:["The list of query parameters"]}],seq:1,nm:"parameters"}],nm:"Query"},defaultPath:{$t:{pk:".",nm:"Path"},mt:"a",nm:"defaultPath"},defaultAuthority:{$t:{pk:".",nm:"Authority"},mt:"a",nm:"defaultAuthority"},parseParameter:{$t:{pk:".",nm:"Parameter"},pa:1,mt:"m",an:[{doc:["Parses a raw percent-encoded path parameter"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"part"}]],nm:"parseParameter"},Path:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["Represents a URI Path part"]},{by:["Stéphane Épardaud"]}],$m:{equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this\nobject"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},toRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Returns either an externalisable (percent-encoded) or\nhuman (non parseable) representation of this part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"}},$at:{absolute:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"a",an:[{doc:["True if this path is absolute (begins with a `\/`)"]}],nm:"absolute"},humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (non parseable) representation of this\npart"]}],nm:"humanRepresentation"},segments:{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"PathSegment"}},pk:"$",nm:"Sequential"},pa:1,mt:"a",an:[{doc:["The list of path segments"]}],nm:"segments"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded)\nrepresentation of this part"]}],nm:"string"}},ps:[{$t:{md:"$",pk:"$",nm:"Boolean"},def:1,pa:1,mt:"prm",an:[{doc:["True if this path is absolute (begins with a `\/`)"]}],nm:"absolute"},{$t:{md:"$",ta:{"Sequential.Element":{pk:".",nm:"PathSegment"}},pk:"$",nm:"Sequential"},pa:1,mt:"prm",an:[{doc:["The list of path segments"]}],seq:1,nm:"segments"}],nm:"Path"},defaultQuery:{$t:{pk:".",nm:"Query"},mt:"a",nm:"defaultQuery"},InvalidUriException:{super:{md:"$",pk:"$",nm:"Exception"},pa:1,mt:"c",an:[{doc:["Thrown when a URI is invalid"]},{by:["Stéphane Épardaud"]}],$at:{message$kuk0fl:{$t:{md:"$",pk:"$",nm:"String"},mt:"a",nm:"message"}},ps:[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"message"}],nm:"InvalidUriException"},fromHex:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"hex"}]],nm:"fromHex"},decodePercentEncoded:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Decodes a percent-encoded ASCII string."]},{by:["Stéphane Épardaud"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"str"}]],nm:"decodePercentEncoded"},Authority:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["Represents a URI Authority part (user, password, host and port)"]},{by:["Stéphane Épardaud"]}],$m:{withUser:{$t:{pk:".",nm:"Authority"},pa:1,mt:"m",an:[{doc:["Create a new [[Authority]] based on this [[Authority]], replacing the `user` with the given value"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},mt:"prm",nm:"user"}]],nm:"withUser"},with:{$t:{pk:".",nm:"Authority"},pa:1,mt:"m",an:[{doc:["Create a new [[Authority]] based on this [[Authority]], replacing the specified values"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",nm:"user"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",nm:"password"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",nm:"host"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},def:1,mt:"prm",nm:"port"},{$t:{md:"$",pk:"$",nm:"Boolean"},def:1,mt:"prm",nm:"ipLiteral"}]],nm:"with"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this object"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},withHost:{$t:{pk:".",nm:"Authority"},pa:1,mt:"m",an:[{doc:["Create a new [[Authority]] based on this [[Authority]], replacing the `host` and `ipLiteral` with the given values"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},mt:"prm",nm:"host"},{$t:{md:"$",pk:"$",nm:"Boolean"},def:1,mt:"prm",nm:"ipLiteral"}]],nm:"withHost"},withPassword:{$t:{pk:".",nm:"Authority"},pa:1,mt:"m",an:[{doc:["Create a new [[Authority]] based on this [[Authority]], replacing the `password` with the given value"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},mt:"prm",nm:"password"}]],nm:"withPassword"},withPort:{$t:{pk:".",nm:"Authority"},pa:1,mt:"m",an:[{doc:["Create a new [[Authority]] based on this [[Authority]], replacing the `port` with the given value"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},mt:"prm",nm:"port"}]],nm:"withPort"},toRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Returns either an externalisable (percent-encoded) or human (non parseable) representation of this part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"}},$at:{port:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:1,mt:"a",an:[{doc:["The optional port number"]}],nm:"port"},host:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",an:[{doc:["The optional host"]}],nm:"host"},humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (non parseable) representation of this part"]}],nm:"humanRepresentation"},specified:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",an:[{doc:["Returns true if the authority part is present (if the host is not null)"]}],nm:"specified"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded) representation of this part"]}],nm:"string"},ipLiteral:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"a",an:[{doc:["True if the host name is an ipLiteral (IPV6 or later) and has to be represented\nsurrounded by [] (square brackets)"]}],nm:"ipLiteral"},password:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",an:[{doc:["The optional password"]}],nm:"password"},user:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",an:[{doc:["The optional user"]}],nm:"user"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional user"]}],$hdn:1,nm:"user"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional password"]}],$hdn:1,nm:"password"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional host"]}],$hdn:1,nm:"host"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional port number"]}],$hdn:1,nm:"port"},{$t:{md:"$",pk:"$",nm:"Boolean"},def:1,pa:1,mt:"prm",an:[{doc:["True if the host name is an ipLiteral (IPV6 or later) and has to be represented\nsurrounded by [] (square brackets)"]}],$hdn:1,nm:"ipLiteral"}],nm:"Authority"},Uri:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["The URI class. See [RCF 3986][rfc3986] for specifications.\n\n[rfc3986]: http:\/\/tools.ietf.org\/html\/rfc3986"]},{by:["Stéphane Épardaud"]}],$m:{withQuery:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the `query` with the given value"]}],ps:[[{$t:{pk:".",nm:"Query"},mt:"prm",nm:"query"}]],nm:"withQuery"},with:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the specified values"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",nm:"scheme"},{$t:{pk:".",nm:"Authority"},def:1,mt:"prm",nm:"authority"},{$t:{pk:".",nm:"Path"},def:1,mt:"prm",nm:"path"},{$t:{pk:".",nm:"Query"},def:1,mt:"prm",nm:"query"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,mt:"prm",nm:"fragment"}]],nm:"with"},toRepresentation$g6tzg:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this\nobject"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},makePathAbsoluteIfRequired$lufv46:{$t:{pk:".",nm:"Path"},mt:"m",ps:[[{$t:{pk:".",nm:"Authority"},mt:"prm",nm:"authority"},{$t:{pk:".",nm:"Path"},mt:"prm",nm:"path"}]],nm:"makePathAbsoluteIfRequired"},withScheme:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the `scheme` with the given value"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},mt:"prm",nm:"scheme"}]],nm:"withScheme"},withPath:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the `path` with the given value"]}],ps:[[{$t:{pk:".",nm:"Path"},mt:"prm",nm:"path"}]],nm:"withPath"},withFragment:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the `fragment` with the given value"]}],ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},mt:"prm",nm:"fragment"}]],nm:"withFragment"},withAuthority:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Create a new [[Uri]] based on this [[Uri]], replacing the `authority` with the given value"]}],ps:[[{$t:{pk:".",nm:"Authority"},mt:"prm",nm:"authority"}]],nm:"withAuthority"}},$at:{pathPart:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns the path as an externalisable (percent-encoded)\nstring representation. Can be an empty string."]}],nm:"pathPart"},authority:{$t:{pk:".",nm:"Authority"},pa:1,mt:"a",an:[{doc:["The optional Authority part (contains user, password,\nhost and port)"]}],nm:"authority"},humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (not parseable) representation of this\nURI."]}],nm:"humanRepresentation"},scheme:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",an:[{doc:["The optional URI scheme: `http`, `https`, `mailto`\u2026"]}],nm:"scheme"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},query:{$t:{pk:".",nm:"Query"},pa:1,mt:"a",an:[{doc:["The optional query part"]}],nm:"query"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded)\nrepresentation of this URI."]}],nm:"string"},path:{$t:{pk:".",nm:"Path"},pa:1,mt:"a",an:[{doc:["The optional Path part"]}],nm:"path"},queryPart:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"g",an:[{doc:["Returns the query as an externalisable (percent-encoded)\nstring representation. Can be null."]}],nm:"queryPart"},relative:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",an:[{doc:["Returns true if this is a relative URI"]}],nm:"relative"},fragment:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",an:[{doc:["The optional fragment (hash) part"]}],nm:"fragment"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional URI scheme: `http`, `https`, `mailto`\u2026"]}],$hdn:1,nm:"scheme"},{$t:{pk:".",nm:"Authority"},def:1,pa:1,mt:"prm",an:[{doc:["The optional Authority part (contains user, password,\nhost and port)"]}],$hdn:1,nm:"authority"},{$t:{pk:".",nm:"Path"},def:1,pa:1,mt:"prm",an:[{doc:["The optional Path part"]}],$hdn:1,nm:"path"},{$t:{pk:".",nm:"Query"},def:1,pa:1,mt:"prm",an:[{doc:["The optional query part"]}],$hdn:1,nm:"query"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",an:[{doc:["The optional fragment (hash) part"]}],$hdn:1,nm:"fragment"}],nm:"Uri"},parse:{$t:{pk:".",nm:"Uri"},pa:1,mt:"m",an:[{doc:["Parses a URI"]},{throws:["InvalidUriException","If the URI is invalid"]}],$m:{parsePath$o6l320:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parsePath"},parseQueryPart$owmuko:{$t:{pk:".",nm:"Query"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"queryPart"}]],nm:"parseQueryPart"},parsePathSegmentParameters$5c7b9v:{$t:{md:"$",ta:{"Iterable.Absent":{md:"$",pk:"$",nm:"Null"},"Iterable.Element":{pk:".",nm:"Parameter"}},pk:"$",nm:"Iterable"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"part"}]],nm:"parsePathSegmentParameters"},parseQuery$le8u59:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parseQuery"},parseAuthority$2cjt40:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parseAuthority"},parseURI$t1etcv:{$ff:1,$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parseURI"},parseFragment$oobhkr:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parseFragment"},parseScheme$m11988:{$t:{md:"$",pk:"$",nm:"String"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parseScheme"},parseRawPathSegment$ql9kx:{$t:{pk:".",nm:"PathSegment"},mt:"m",an:[{doc:["Parse a raw (percent-encoded) segment, with optional\nparameters to be parsed"]}],ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"part"}]],nm:"parseRawPathSegment"},parseHostAndPort$dtrlrv:{$ff:1,$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"hostAndPort"}]],nm:"parseHostAndPort"},parseUserInfo$mrmpb0:{$ff:1,$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"userInfo"}]],nm:"parseUserInfo"}},ps:[[{$t:{md:"$",pk:"$",nm:"String"},mt:"prm",nm:"uri"}]],nm:"parse"},Parameter:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:[{doc:["Represents a URI path segment or query parameter"]},{by:["Stéphane Épardaud"]}],$m:{equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",an:[{doc:["Returns true if the given object is the same as this object"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},toRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"m",an:[{doc:["Returns either an externalisable (percent-encoded) or human (non parseable) representation of this part"]}],ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"human"}]],nm:"toRepresentation"}},$at:{val:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},pa:1,mt:"a",nm:"val"},humanRepresentation:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"g",an:[{doc:["Returns a human (non parseable) representation of this part"]}],nm:"humanRepresentation"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",an:[{doc:["Returns an externalisable (percent-encoded) representation of this part"]}],nm:"string"},name:{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"a",nm:"name"}},ps:[{$t:{md:"$",pk:"$",nm:"String"},pa:1,mt:"prm",$hdn:1,nm:"name"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"String"}]},def:1,pa:1,mt:"prm",$hdn:1,nm:"val"}],nm:"Parameter"},"$pkg-pa":1,"$pkg-anns":[{doc:["An API for constructing and parsing URIs."]}],eq:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"a"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"b"}]],nm:"eq"}},"$mod-version":"1.3.2","$mod-anns":[{doc:["This module defines APIs for representing and manipulating URIs.\n\nThe [[ceylon.uri::Uri]] class supports parsing and creating\nURI as defined by [RFC 3986](https:\/\/tools.ietf.org\/html\/rfc3986).\nA new `Uri` may be obtained using [[ceylon.uri::parse]].\n\n    void printQuery(String uriAsString) {\n        Uri uri = parse(uriAsString);\n        print(\"Query part: ``uri.query``\");\n    }"]},{by:["Stéphane Épardaud","Matej Lazar"]},{license:["Apache Software License"]}],"$mod-bin":"10.0"};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
